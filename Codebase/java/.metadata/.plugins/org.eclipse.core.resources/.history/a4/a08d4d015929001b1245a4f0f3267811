package Assignment3;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Assignment3 
{
    private static SecretKeySpec secretKey;
    private static byte[] key;
    
	public static void main (String[] args) 
			throws 	InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, 
					InvalidAlgorithmParameterException, IllegalBlockSizeException, 
					BadPaddingException, UnsupportedEncodingException
	{	    			
		Client client = new Client();
		Server server = new Server();
				
		
		String secretKey = "8c735ed7283fa4b9768c9f0dc46d5cfc7be9af46f107b2bc9b9c5ecad3fd4c52";
		
	    String originalString = "Clients are superior to a server, who should simply stop trying.";
	    String encryptedString = encrypt(originalString, secretKey) ;
	    String decryptedString = decrypt(encryptedString, secretKey) ;
	     
	    System.out.println(originalString);
	    System.out.println(encryptedString);
	    System.out.println(decryptedString);
		
		
		// initial connection - send "Hello" from client to server, share public key 
		ClientMessage clientMessage = client.ConnectToServer();
		server.ReceiveConnection(clientMessage);
		System.out.println();
		
		// server shares public key with client
		client.ReceivePublicKey(server.SendPublicKey());
		System.out.println();
		
		// server and client share IDs
		client.ReceiveHello(server.SendHello());
		System.out.println();
		server.ReceiveHello(client.SendHello());
		System.out.println();

		// Client and server generate a public key each and exchange
		client.ReceiveDHKey(server.SendDHKey());
		System.out.println();
		server.ReceiveDHKey(client.SendDHKey());

		System.out.println();
		client.CombineAndEncryptDHKey();
		server.CombineAndEncryptDHKey();
				
		ClientMessage en = client.SendEncryptedMessage();
		System.out.println(en.ReadMessage());
	}
	
	public static String encrypt(String strToEncrypt, String secret)
	{
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        } 
        catch (Exception e) 
        {
            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
	}

	 
    public static String decrypt(String strToDecrypt, String secret) 
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        } 
        catch (Exception e) 
        {
            System.out.println("Error while decrypting: " + e.toString());
        }
        return null;
    }
    
    public static void setKey(String myKey) 
    {
        MessageDigest sha = null;
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16); 
            secretKey = new SecretKeySpec(key, "AES");
        } 
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } 
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
}
