package Assignment3;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class Assignment3 
{
	private static final String key = "aesEncryptionKey";
	private static final String initVector = "encryptionIntVec";

    private static final Charset ASCII = Charset.forName("US-ASCII");
	public static void main (String[] args) throws Exception
	{	    			
		Client client = new Client();
		Server server = new Server();		


	    String originalString = "password";
	    System.out.println("Original String to encrypt - " + originalString);
	    String encryptedString = encrypt(originalString);
	    System.out.println("Encrypted String - " + encryptedString);
	    String decryptedString = decrypt(encryptedString);
	    System.out.println("After decryption - " + decryptedString);
		
		// initial connection - send "Hello" from client to server, share public key 
		ClientMessage clientMessage = client.ConnectToServer();
		server.ReceiveConnection(clientMessage);
		System.out.println();
		
		// server shares public key with client
		client.ReceivePublicKey(server.SendPublicKey());
		System.out.println();
		
		// server and client share IDs
		client.ReceiveHello(server.SendHello());
		System.out.println();
		server.ReceiveHello(client.SendHello());
		System.out.println();

		// Client and server generate a public key each and exchange
		client.ReceiveDHKey(server.SendDHKey());
		System.out.println();
		server.ReceiveDHKey(client.SendDHKey());

		System.out.println();
		client.CombineAndEncryptDHKey();
		server.CombineAndEncryptDHKey();
				
		ClientMessage en = client.SendEncryptedMessage();
		String mm = client.ReceiveEncryptedMessage(en);
		System.out.println(mm);
	}
	 
	public static String encrypt(String value) {
	    try {
	        IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
	        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
	 
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
	        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
	 
	        byte[] encrypted = cipher.doFinal(value.getBytes());
	        return Base64.encodeBase64String(encrypted);
	    } catch (Exception ex) {
	        ex.printStackTrace();
	    }
	    return null;
	}

	
	public static String decrypt(String encrypted) {
	    try {
	        IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
	        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");
	 
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
	        cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
	        byte[] original = cipher.doFinal(Base64.decodeBase64(encrypted));
	 
	        return new String(original);
	    } catch (Exception ex) {
	        ex.printStackTrace();
	    }
	 
	    return null;
	}
}
