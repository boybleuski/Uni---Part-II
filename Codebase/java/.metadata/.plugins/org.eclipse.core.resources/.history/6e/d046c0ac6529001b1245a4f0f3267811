package Assignment3;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class Assignment3 
{
    private static SecretKeySpec secretKey;
    private static byte[] key;

    private static final Charset ASCII = Charset.forName("US-ASCII");
	public static void main (String[] args) throws Exception
	{	    			
		Client client = new Client();
		Server server = new Server();
		
		
        String base64Cipher = "iz1qFlQJfs6Ycp+gcc2z4w==";
        byte [] cipherBytes = Utility.HexToByteArray(base64Cipher);
        byte [] iv = "1234567812345678".getBytes(ASCII);
        byte [] keyBytes = "1234567812345678".getBytes(ASCII);

        SecretKey aesKey = new SecretKeySpec(keyBytes, "AES");

        Cipher cipher = Cipher.getInstance("AES/CBC/NOPADDING");
        cipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(iv));

        byte[] result = cipher.doFinal(cipherBytes);
        System.out.println(Utility.bytesToHex(result));
		
		
		
		
		
		
		
		
		// initial connection - send "Hello" from client to server, share public key 
		ClientMessage clientMessage = client.ConnectToServer();
		server.ReceiveConnection(clientMessage);
		System.out.println();
		
		// server shares public key with client
		client.ReceivePublicKey(server.SendPublicKey());
		System.out.println();
		
		// server and client share IDs
		client.ReceiveHello(server.SendHello());
		System.out.println();
		server.ReceiveHello(client.SendHello());
		System.out.println();

		// Client and server generate a public key each and exchange
		client.ReceiveDHKey(server.SendDHKey());
		System.out.println();
		server.ReceiveDHKey(client.SendDHKey());

		System.out.println();
		client.CombineAndEncryptDHKey();
		server.CombineAndEncryptDHKey();
				
		ClientMessage en = client.SendEncryptedMessage();
		String mm = client.ReceiveEncryptedMessage(en);
		System.out.println(mm);
	}
}
