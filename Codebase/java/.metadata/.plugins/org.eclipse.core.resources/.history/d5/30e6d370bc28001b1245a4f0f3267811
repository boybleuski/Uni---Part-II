package Assignment3;

import java.math.BigInteger;

public class Server 
{
	private String clientID;
	
	private String serverID;
	
	private String sessionID;
	
	private ServerMessage serverMessage;
	
	// shared public key
	private BigInteger rsaPublicKey = new BigInteger("65537");
	// generated private key for 1st Diffie-Hellman exchange
	private BigInteger[] serverPrivateKey;
	// generated client public key
	private BigInteger serverPublicKey;
	// generated server public key
	private BigInteger clientPublicKey;
	// Diffie-Hellman parameter 1
	private BigInteger diffieP;
	// Diffie-Hellman parameter 2
	private BigInteger diffieG;
	private BigInteger privateDHKey;
	// Diffie-Hellman client key
	private BigInteger clientDHKey;
	// Diffie-Hellman server key
	private BigInteger serverDHKey;
	// Diffie-Hellman combined key
	private BigInteger combinedDHKey;
	private String encryptedDHKey;

	private BigInteger totient;		
	
	public Server()
	{
		diffieP = new BigInteger("178011905478542266528237562450159990145232156369120674273274450314442865788737020770612695252123463079567156784778466449970650770920727857050009668388144034129745221171818506047231150039301079959358067395348717066319802262019714966524135060945913707594956514672855690606794135837542707371727429551343320695239");
		diffieG = new BigInteger("174068207532402095185811980123523436538604490794561350978495831040599953488455823147851597408940950725307797094915759492368300574252438761037084473467180148876118103083043754985190983472601550494691329488083395492313850000361646482644608492304078721818959999056496097769368017749273708962006689187956744210730");
		serverID = "i00xjmaj99w2";
		sessionID = "3280723325235";
	}
	
	public void ReceiveConnection(ClientMessage clientMessage)
	{
		System.out.println("Server receives: " + clientMessage.ReadMessage());
	}
	
	
	public ServerMessage SendPublicKey()
	{
		System.out.println("Server shares public key: " + rsaPublicKey);
		return new ServerMessage(rsaPublicKey);
	}
	
	
	public ServerMessage SendHello()
	{
		return new ServerMessage(new String[] {serverID, sessionID});
	}
	
	
	public void ReceiveHello(ClientMessage clientMessage)
	{
		clientID = clientMessage.ReadMessage();
		System.out.println("Server receives client ID: " + clientID);
	}
	
	
	public ServerMessage SendServerPublicKey()
	{		
		// generate large primes for RSA key		
		BigInteger rsaPrimeP = Utility.GeneratePrime(1024);
		BigInteger rsaPrimeQ = Utility.GeneratePrime(1024);
		
		// privateKey = (random number A - 1) * (random number B - 1), where 0 < privateKey < prime
		totient = (rsaPrimeP.subtract(BigInteger.ONE)).multiply(rsaPrimeQ.subtract(BigInteger.ONE));
		BigInteger privateKey = BigInteger.ONE.mod(totient).divide(rsaPublicKey);		

		serverPrivateKey = new BigInteger[3];
		serverPrivateKey[0] = rsaPrimeP;
		serverPrivateKey[1] = rsaPrimeQ;
		
		// find a, where a = gcd(b, c) = bp + cq (Extended Euclid's Algorithm)
		serverPrivateKey[2] = Utility.EEA(totient, rsaPublicKey);
		
		serverMessage = new ServerMessage(serverID);
		
		// pair public RSA key with 2048-bit prime
		BigInteger[] publicKeyPair = new BigInteger[2];
		publicKeyPair[0] = rsaPublicKey;
		publicKeyPair[1] = rsaPrimeP.multiply(rsaPrimeQ);
		serverMessage.AddKeyPair(publicKeyPair);
		
		return serverMessage;
	}
	
	// Receive a public key from the server as per the Diffie-Hellman Key Agreement
	public void ReceiveClientPublicKey(ClientMessage publicKey)
	{
		String privateKey = Utility.GetSha256(publicKey.toString());
		serverMessage = new ServerMessage(privateKey);
	}
	
	public ServerMessage SendDHKey()
	{
		// generate positive random prime smaller than diffieP
		privateDHKey = Utility.GeneratePrime(1024);
		while (privateDHKey.compareTo(diffieP) == 1 && privateDHKey.compareTo(BigInteger.TWO) < 1)
		{
			privateDHKey = Utility.GeneratePrime(1024);
		}
		
		serverDHKey = Utility.FastExponentation(diffieG, privateDHKey, diffieP);
		
		System.out.println("Server sends Diffie-Hellman server public key: " + serverDHKey);
		serverMessage = new ServerMessage(serverDHKey);
		return serverMessage;
	}
	
	public void ReceiveDHKey(ClientMessage message)
	{
		clientDHKey = message.ReadKey();
		System.out.println("Server receives Diffie-Hellman client public key: " + clientDHKey);
		
	}
	
	public void CombineAndEncryptDHKey()
	{
		combinedDHKey = Utility.FastExponentation(clientDHKey, privateDHKey, diffieP);
		encryptedDHKey = Utility.GetSha256(combinedDHKey.toString());
		System.out.println("Server combines and encrypts Diffie-Hellman public keys: " + encryptedDHKey);
	}
}
